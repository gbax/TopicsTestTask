// Generated by CoffeeScript 1.7.1

/*
Main view
 */

(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.App.Views.MainForm = (function(_super) {
    var columns;

    __extends(MainForm, _super);

    function MainForm() {
      return MainForm.__super__.constructor.apply(this, arguments);
    }

    MainForm.prototype.initialize = function() {
      var grid, paginator;
      window.App.topics = new window.App.Collections.Topics();
      grid = new Backgrid.Grid({
        events: {
          'click th a': function(e) {
            return $('th', $(this.el)).not($(e.target).parent()).removeClass('descending').removeClass('ascending');
          }
        },
        columns: columns,
        collection: window.App.topics
      });
      paginator = new Backgrid.Extension.Paginator({
        collection: window.App.topics
      });
      $("#grid").append(grid.render().$el);
      $("#paginator").append(paginator.render().$el);
      window.App.topics.fetch({
        reset: true
      });
      return new window.App.Views.AddTopic({
        collection: window.App.topics
      });
    };

    columns = [
      {
        name: "id",
        label: "Номер",
        editable: false,
        cell: Backgrid.IntegerCell.extend({
          orderSeparator: ''
        })
      }, {
        name: "description",
        label: "Форум",
        editable: false,
        cell: Backgrid.UriCell.extend({
          render: function() {
            var formattedValue, rawValue;
            this.$el.empty();
            rawValue = "/topic/" + this.model.get('id');
            formattedValue = this.model.get('description');
            this.$el.append($("<a>", {
              tabIndex: -1,
              href: rawValue,
              title: formattedValue,
              target: "_self"
            }).text(formattedValue));
            this.delegateEvents();
            return this;
          }
        })
      }, {
        name: "updateDate",
        cell: "string",
        label: "Дата создания",
        editable: false,
        sortable: true
      }, {
        cell: "id",
        label: "Действие",
        editable: false,
        sortable: false,
        cell: Backgrid.Cell.extend({
          events: {
            'click': 'removeModel'
          },
          removeModel: function(e) {
            var collection;
            e.preventDefault();
            collection = this.model.collection;
            return this.model.destroy({
              dataType: "text",
              success: function(model, response) {
                return collection.renderOnDestroy();
              },
              error: function(model, response) {
                return alert("Произошла ошибка при удалении. Обновите страницу и повторите");
              }
            });
          },
          render: function() {
            var formattedValue;
            this.$el.empty();
            if (this.model.get('canDelete')) {
              formattedValue = "Удалить";
              this.$el.append($("<button>", {
                tabIndex: -1,
                type: "button",
                "class": "delete",
                title: formattedValue,
                target: this.target
              }).text(formattedValue));
              this.delegateEvents();
            }
            return this;
          }
        })
      }
    ];

    return MainForm;

  })(Backbone.View);


  /*
  Add topic form
   */

  window.App.Views.AddTopic = (function(_super) {
    __extends(AddTopic, _super);

    function AddTopic() {
      return AddTopic.__super__.constructor.apply(this, arguments);
    }

    AddTopic.prototype.initialize = function() {
      return this.descriptionEl = this.$('#description');
    };

    AddTopic.prototype.el = '#topicForm';

    AddTopic.prototype.events = {
      submit: 'addTopic'
    };

    AddTopic.prototype.addTopic = function(e) {
      e.preventDefault();
      this.collection.create({
        description: this.descriptionEl.val()
      }, {
        wait: true
      });
      return this.clearForm();
    };

    AddTopic.prototype.clearForm = function() {
      return this.descriptionEl.val('');
    };

    return AddTopic;

  })(Backbone.View);


  /*----------------------------------------------------------------------------------------------------------------- */


  /*
  Topic view
   */

  window.App.Views.TopicForm = (function(_super) {
    __extends(TopicForm, _super);

    function TopicForm() {
      return TopicForm.__super__.constructor.apply(this, arguments);
    }

    TopicForm.prototype.initialize = function() {
      var grid, paginator;
      window.App.messages = new window.App.Collections.Messages();
      grid = new Backgrid.Grid({
        events: {
          'click th a': function(e) {
            return $('th', $(this.el)).not($(e.target).parent()).removeClass('descending').removeClass('ascending');
          }
        },
        columns: this.columns,
        collection: window.App.messages
      });
      paginator = new Backgrid.Extension.Paginator({
        collection: window.App.messages
      });
      $("#grid").append(grid.render().$el);
      $("#paginator").append(paginator.render().$el);
      window.App.messages.fetch({
        reset: true
      });
      return new window.App.Views.AddMessage({
        collection: window.App.messages
      });
    };

    TopicForm.prototype.columns = [
      {
        name: "id",
        label: "Номер",
        editable: false,
        cell: Backgrid.IntegerCell.extend({
          orderSeparator: ''
        })
      }, {
        name: "message",
        cell: "string",
        label: "Сообщение",
        editable: false,
        sortable: true
      }, {
        name: "date",
        cell: "string",
        label: "Дата создания",
        editable: false,
        sortable: true
      }, {
        cell: "id",
        label: "Действие",
        editable: false,
        sortable: false,
        cell: Backgrid.Cell.extend({
          events: {
            'click': 'removeMessage'
          },
          removeMessage: function(e) {
            e.preventDefault();
            return this.model.destroy({
              dataType: "text",
              error: function(model, response) {
                return alert("Произошла ошибка при удалении. Обновите страницу и повторите");
              }
            });
          },
          render: function() {
            var formattedValue;
            this.$el.empty();
            if (this.model.get('canDelete')) {
              formattedValue = "Удалить";
              this.$el.append($("<button>", {
                tabIndex: -1,
                type: "button",
                "class": "delete",
                title: formattedValue,
                target: this.target
              }).text(formattedValue));
              this.delegateEvents();
            }
            return this;
          }
        })
      }
    ];

    return TopicForm;

  })(Backbone.Model);


  /*
  Add message form
   */

  window.App.Views.AddMessage = (function(_super) {
    __extends(AddMessage, _super);

    function AddMessage() {
      return AddMessage.__super__.constructor.apply(this, arguments);
    }

    AddMessage.prototype.initialize = function() {
      return this.messageEl = this.$('#message');
    };

    AddMessage.prototype.el = '#messageForm';

    AddMessage.prototype.events = {
      submit: 'addMessage'
    };

    AddMessage.prototype.addMessage = function(e) {
      e.preventDefault();
      this.collection.create({
        message: this.messageEl.val()
      }, {
        wait: true
      });
      return this.clearForm();
    };

    AddMessage.prototype.clearForm = function() {
      return this.messageEl.val('');
    };

    return AddMessage;

  })(Backbone.View);

}).call(this);
